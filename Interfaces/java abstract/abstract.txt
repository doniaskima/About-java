Abstraction in java is a process of hiding the implementation details and showing only functionality to the user .

Another way , it shows essential things to the user and hides the internal detail , for exemple, the
sending SMS where you type the text and send the message .
you don't know the internal processing about the message delivery .


Abstraction lets you focus onthe object does not instead of how it does it .

There is 2 ways to acheive abstracction in java .
1-Abstract class(0 to 100%) 
2-Interface (100%)


//lets' say What is abstract class

abstract class A{}

//Abtsract method 

a method which is declared as abstract and does not have implemetation is known as an abstract method .

abstract void printStatus(); //no method body and abstract

//Exemple of Abstract class that has an abstract method 

abstract class Bike{
    abstract void run();
}

class Honda4 extends Bike{
    void run(){
        System.out.println("running safely");
    }

    public static void main(String args[]){
        Bike obj = new Honda4();
        obj.run();
    }
}


//Undrestanding the real scenario of Abstract Class

abstract class Shape{
    abstract void draw();
}

class Rectangle extends Shape{
    void draw(){System.out.println("drawing rectangle");}
}

class Circle1 extends Shape{
    void draw(){System.out.println("drawing circle")}
}


class TestAbstraction1{
    public static void main(String[] args){
        Shape s =new Circle1();
        s.draw();
    }
}

//Abstract class having constructor , data member and methods 


an absrtact class can have a data memeber , abstract method , method body (non-abstract method),
constructor , and even main() method .


//exemple of an abstract class that has abstract and non-abstract methods 

abstract class Bike{
    Bike(){
        System.out.println("Bike is created");
    }
    abstract void run();
    void changeGear(){
        System.out.println("gear changed");
    }
}

Rule: If there is an abstract method in a class, that class must be abstract.

// if u are extending an abstract class that has an abstract method, 
you must either provide the implementation of the method or make this class abstract .


//another real scenario of absract class .

The abstract class can also be used to provide some of the interface . In such case ,
the end user may not be forced to override all the methods of the interface .

interface A{
    void a();
    void b();
    void c();
    void d();
}

abstract class B implements A{
    public void c(){
        System.out.println("I am C");
    }
}

class M extends B{
public void a(){System.out.println("I am a");}  
public void b(){System.out.println("I am b");}  
public void d(){System.out.println("I am d");}  
}


public Test5{
    public static void main(String args[]){
        A a=new M();  
        a.a();  
        a.b();  
        a.c();  
        a.d();  
    }
}

Output:I am a
       I am b
       I am c
       I am d